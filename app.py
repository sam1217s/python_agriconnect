import streamlit as st
import requests
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
import io
import json
from datetime import datetime

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="AgriConnect Colombia",
    page_icon="üå±",
    layout="wide",
    initial_sidebar_state="expanded"
)

# URL base de la API
API_BASE_URL = "http://127.0.0.1:8000"

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #2E7D32;
        text-align: center;
        margin-bottom: 2rem;
    }
    .agent-card {
        background-color: #f0f8f0;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #2E7D32;
        margin: 1rem 0;
    }
    .metric-card {
        background-color: #e8f5e8;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
    }
    .result-success {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #c3e6cb;
    }
    .result-warning {
        background-color: #fff3cd;
        color: #856404;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #ffeaa7;
    }
    .explanation-box {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #dee2e6;
        margin-top: 1rem;
    }
</style>
""", unsafe_allow_html=True)

def check_api_status():
    """Verificar estado de la API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False

def main():
    # Header principal
    st.markdown('<h1 class="main-header">üå± AgriConnect Colombia</h1>', unsafe_allow_html=True)
    st.markdown('<p style="text-align: center; font-size: 1.2rem; color: #666;">Inteligencia Artificial para la Agricultura Rural</p>', unsafe_allow_html=True)
    
    # Verificar estado de la API
    if not check_api_status():
        st.error("‚ö†Ô∏è No se puede conectar con la API. Aseg√∫rate de que el servidor est√© ejecut√°ndose en http://127.0.0.1:8000")
        st.code("uvicorn main:app --reload")
        return
    
    # Sidebar para navegaci√≥n
    st.sidebar.title("Navegaci√≥n")
    pages = {
        "üè† Inicio": "home",
        "üå¶Ô∏è ClimateAI": "climate",
        "üí∞ MarketAI": "market", 
        "üåø AgroExpert": "agro",
        "üè¶ FinanceAI": "finance"
    }
    
    selected_page = st.sidebar.selectbox("Selecciona un agente:", list(pages.keys()))
    page = pages[selected_page]
    
    # Informaci√≥n del estado
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Estado del Sistema**")
    api_status = check_api_status()
    status_color = "üü¢" if api_status else "üî¥"
    st.sidebar.markdown(f"{status_color} API: {'Activa' if api_status else 'Inactiva'}")
    
    # Renderizar p√°gina seleccionada
    if page == "home":
        render_home()
    elif page == "climate":
        render_climate()
    elif page == "market":
        render_market()
    elif page == "agro":
        render_agro()
    elif page == "finance":
        render_finance()

def render_home():
    """P√°gina de inicio"""
    st.markdown("## Bienvenido a AgriConnect")
    st.markdown("Un ecosistema de inteligencia artificial dise√±ado para empoderar a los peque√±os productores rurales de Colombia.")
    
    # M√©tricas del sistema
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown('<div class="metric-card"><h3>4</h3><p>Agentes IA</p></div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="metric-card"><h3>73%</h3><p>Precisi√≥n AgroExpert</p></div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="metric-card"><h3>0.80</h3><p>Recall FinanceAI</p></div>', unsafe_allow_html=True)
    
    with col4:
        st.markdown('<div class="metric-card"><h3>24/7</h3><p>Disponibilidad</p></div>', unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Descripci√≥n de agentes
    st.markdown("## Nuestros Agentes IA")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="agent-card">
        <h4>üå¶Ô∏è ClimateAI</h4>
        <p>Predicci√≥n clim√°tica basada en temperatura y humedad. Ayuda a planificar siembras y cosechas.</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="agent-card">
        <h4>üåø AgroExpert</h4>
        <p>Diagn√≥stico de enfermedades en hojas mediante an√°lisis de im√°genes con explicabilidad visual.</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="agent-card">
        <h4>üí∞ MarketAI</h4>
        <p>Proyecci√≥n de precios agr√≠colas para optimizar momentos de venta y planificaci√≥n financiera.</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="agent-card">
        <h4>üè¶ FinanceAI</h4>
        <p>Evaluaci√≥n de microcr√©ditos rurales con criterios espec√≠ficos para el sector agropecuario.</p>
        </div>
        """, unsafe_allow_html=True)

def render_climate():
    """
    P√°gina de predicci√≥n clim√°tica
    """
    st.header("üå§Ô∏è ClimateAI - Predicci√≥n Clim√°tica")
    st.markdown("**Predice la probabilidad de lluvia basado en temperatura y humedad**")
    
    # Informaci√≥n explicativa
    with st.expander("‚ÑπÔ∏è ¬øC√≥mo funciona?", expanded=False):
        st.markdown("""
        - **Temperatura**: Temperatura ambiente en grados Celsius (10-40¬∞C)
        - **Humedad**: Porcentaje de humedad relativa (40-90%)
        - **Modelo**: Regresi√≥n log√≠stica entrenada con datos IDEAM 2023-2025
        - **Regi√≥n**: Optimizado para zona Andina y Pac√≠fica colombiana
        """)
    
    # Layout en columnas
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìä Par√°metros Clim√°ticos")
        
        # Inputs del usuario
        temperature = st.slider(
            "üå°Ô∏è Temperatura (¬∞C)",
            min_value=10.0,
            max_value=40.0,
            value=24.0,
            step=0.5,
            help="Temperatura ambiente en grados Celsius"
        )
        
        humidity = st.slider(
            "üíß Humedad Relativa (%)",
            min_value=40.0,
            max_value=90.0,
            value=70.0,
            step=1.0,
            help="Porcentaje de humedad relativa"
        )
        
        # Informaci√≥n contextual
        st.info(f"üìç **Condiciones actuales**: {temperature}¬∞C, {humidity}% humedad")
        
        # Bot√≥n de predicci√≥n
        if st.button("üîÆ Predecir Lluvia", type="primary", use_container_width=True):
            # Preparar datos para la API
            data = {
                "temp": float(temperature),
                "humidity": float(humidity)
            }
            
            # Mostrar spinner mientras procesa
            with st.spinner("üîÑ Analizando condiciones clim√°ticas..."):
                try:
                    # Llamada al backend
                    import requests
                    response = requests.post(
                        "http://localhost:8000/clima", 
                        json=data,
                        timeout=10
                    )
                    
                    if response.status_code == 200:
                        # Guardar resultado en session state
                        result = response.json()
                        st.session_state.climate_result = result
                        st.success("‚úÖ Predicci√≥n completada exitosamente!")
                        
                    else:
                        st.error(f"‚ùå Error del servidor: {response.status_code}")
                        st.session_state.climate_result = None
                        
                except requests.exceptions.ConnectionError:
                    st.error("üîå Error de conexi√≥n: Verifica que el backend est√© ejecut√°ndose en http://localhost:8000")
                    st.session_state.climate_result = None
                    
                except requests.exceptions.Timeout:
                    st.error("‚è±Ô∏è Tiempo de espera agotado: El servidor tard√≥ demasiado en responder")
                    st.session_state.climate_result = None
                    
                except Exception as e:
                    st.error(f"üí• Error inesperado: {str(e)}")
                    st.session_state.climate_result = None
    
    with col2:
        st.subheader("üéØ Gu√≠a R√°pida")
        st.markdown("""
        **üåßÔ∏è Alta probabilidad de lluvia:**
        - Temperatura > 25¬∞C
        - Humedad > 80%
        
        **‚òÄÔ∏è Baja probabilidad de lluvia:**
        - Temperatura < 20¬∞C
        - Humedad < 60%
        
        **üå§Ô∏è Condiciones mixtas:**
        - Depende de la combinaci√≥n
        """)
    
    # Mostrar resultados si existen
    if st.session_state.climate_result is not None:
        st.markdown("---")
        
        result = st.session_state.climate_result
        
        # Resultado principal
        rain_prediction = result.get('rain', False)
        confidence = result.get('confidence', 0)
        
        # Crear m√©tricas visuales
        col_result1, col_result2, col_result3 = st.columns(3)
        
        with col_result1:
            if rain_prediction:
                st.metric(
                    "üåßÔ∏è Predicci√≥n",
                    "LLUVIA",
                    delta="Alta probabilidad",
                    delta_color="normal"
                )
            else:
                st.metric(
                    "‚òÄÔ∏è Predicci√≥n", 
                    "SIN LLUVIA",
                    delta="Baja probabilidad",
                    delta_color="inverse"
                )
        
        with col_result2:
            st.metric(
                "üìä Confianza",
                f"{confidence:.1%}" if confidence > 0 else "N/A",
                delta=None
            )
            
        with col_result3:
            # Calcular √≠ndice de confort
            comfort_index = "Alto" if 20 <= temperature <= 26 and 50 <= humidity <= 70 else "Medio" if 18 <= temperature <= 28 and 45 <= humidity <= 75 else "Bajo"
            st.metric(
                "üå°Ô∏è Confort",
                comfort_index,
                delta=None
            )
        
        # Alerta principal
        if rain_prediction:
            st.success("""
            ### üåßÔ∏è ¬°Predicci√≥n: Se esperan precipitaciones!
            
            **Recomendaciones agr√≠colas:**
            - üöú Evita trabajos de campo intensivos
            - üå± Ideal para cultivos que requieren agua
            - üì¶ Protege fertilizantes y semillas
            - üõ°Ô∏è Cubre equipos sensibles a la humedad
            """)
        else:
            st.info("""
            ### ‚òÄÔ∏è Predicci√≥n: Condiciones secas
            
            **Recomendaciones agr√≠colas:**
            - üíß Considera sistemas de riego
            - üåæ Buen momento para cosecha
            - üöú Condiciones ideales para maquinaria
            - üå± Monitorea estr√©s h√≠drico en cultivos
            """)
        
        # Explicabilidad del modelo
        if 'explanation' in result and result['explanation']:
            st.markdown("---")
            st.subheader("üîç Explicabilidad del Modelo (SHAP)")
            
            with st.expander("üìà Ver an√°lisis detallado", expanded=False):
                explanation = result['explanation']
                
                # Mostrar valores SHAP si est√°n disponibles
                if isinstance(explanation, list) and len(explanation) >= 2:
                    col_exp1, col_exp2 = st.columns(2)
                    
                    with col_exp1:
                        temp_impact = explanation[0] if len(explanation) > 0 else 0
                        st.metric(
                            "üå°Ô∏è Impacto Temperatura",
                            f"{temp_impact:.3f}",
                            delta="Positivo" if temp_impact > 0 else "Negativo",
                            delta_color="normal" if temp_impact > 0 else "inverse"
                        )
                    
                    with col_exp2:
                        humidity_impact = explanation[1] if len(explanation) > 1 else 0
                        st.metric(
                            "üíß Impacto Humedad",
                            f"{humidity_impact:.3f}",
                            delta="Positivo" if humidity_impact > 0 else "Negativo",
                            delta_color="normal" if humidity_impact > 0 else "inverse"
                        )
                    
                    st.markdown("""
                    **Interpretaci√≥n:**
                    - Valores positivos incrementan la probabilidad de lluvia
                    - Valores negativos la reducen
                    - Mayor magnitud = mayor influencia en la decisi√≥n
                    """)
                else:
                    st.write("Datos de explicabilidad:", explanation)
        
        # Historial y contexto
        st.markdown("---")
        with st.expander("üìä Contexto Regional", expanded=False):
            st.markdown(f"""
            **An√°lisis para las condiciones actuales:**
            
            üå°Ô∏è **Temperatura {temperature}¬∞C:**
            {'Temperatura alta para la regi√≥n Andina' if temperature > 28 else 'Temperatura moderada' if temperature > 22 else 'Temperatura fresca'}
            
            üíß **Humedad {humidity}%:**
            {'Humedad muy alta - t√≠pica de √©poca lluviosa' if humidity > 80 else 'Humedad alta - condiciones favorables para lluvia' if humidity > 70 else 'Humedad moderada' if humidity > 60 else 'Humedad baja - condiciones secas'}
            
            üìÖ **Contexto estacional:**
            Datos basados en patrones clim√°ticos de Antioquia, Tolima, Cauca y Valle del Cauca (2023-2025)
            """)
    
    else:
        # Mensaje cuando no hay resultados
        st.markdown("---")
        st.warning("‚ö†Ô∏è No hay resultados disponibles. Ingresa los par√°metros clim√°ticos y presiona 'Predecir Lluvia' para obtener una predicci√≥n.")
        
        # Mostrar datos de ejemplo
        with st.expander("üí° Ejemplos de uso", expanded=False):
            st.markdown("""
            **Escenario 1 - √âpoca seca:**
            - Temperatura: 22¬∞C
            - Humedad: 55%
            - Resultado esperado: Sin lluvia
            
            **Escenario 2 - √âpoca lluviosa:**
            - Temperatura: 26¬∞C
            - Humedad: 85%
            - Resultado esperado: Lluvia probable
            
            **Escenario 3 - Transici√≥n:**
            - Temperatura: 24¬∞C
            - Humedad: 72%
            - Resultado: Depende del modelo
            """)
    
    # Footer con informaci√≥n t√©cnica
    st.markdown("---")
    st.caption("ü§ñ Modelo entrenado con datos del IDEAM (2023-2025) | üéØ Optimizado para agricultura colombiana | üîÑ Actualizado septiembre 2025")
def render_market():
    """
    P√°gina de predicci√≥n de precios de mercado
    """
    st.header("üí∞ MarketAI - Predicci√≥n de Precios")
    st.markdown("**Predice precios de productos agr√≠colas basado en tendencias de mercado**")
    
    # Informaci√≥n explicativa
    with st.expander("‚ÑπÔ∏è ¬øC√≥mo funciona?", expanded=False):
        st.markdown("""
        - **Fuente de datos**: SIPSA (Sistema de Informaci√≥n de Precios del Sector Agropecuario)
        - **Modelo**: Regresi√≥n lineal con variables temporales y de mercado global
        - **Actualizaci√≥n**: Datos semanales del DANE
        - **Cobertura**: Principales productos agr√≠colas colombianos
        - **Precisi√≥n**: MAE < 50 COP/kg en promedio
        """)
    
    # Layout en columnas
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìä Par√°metros de Mercado")
        
        # Selector de producto
        product_options = {
            "üçÖ Tomate": {"base_price": 2500, "volatility": 0.3},
            "ü•î Papa": {"base_price": 1800, "volatility": 0.2},
            "üßÖ Cebolla": {"base_price": 2200, "volatility": 0.4},
            "ü•ï Zanahoria": {"base_price": 1600, "volatility": 0.25},
            "üåΩ Ma√≠z": {"base_price": 900, "volatility": 0.15},
            "üçå Pl√°tano": {"base_price": 1200, "volatility": 0.2},
            "ü•¨ Lechuga": {"base_price": 3000, "volatility": 0.35},
            "ü•í Pepino": {"base_price": 2800, "volatility": 0.3}
        }
        
        selected_product = st.selectbox(
            "üõí Producto Agr√≠cola",
            options=list(product_options.keys()),
            index=0,
            help="Selecciona el producto para predecir su precio"
        )
        
        # Par√°metros temporales
        day_of_year = st.slider(
            "üìÖ D√≠a del A√±o",
            min_value=1,
            max_value=365,
            value=254,  # Aproximadamente 11 de septiembre
            step=1,
            help="D√≠a del a√±o (1 = 1 enero, 365 = 31 diciembre)"
        )
        
        # Convertir d√≠a a fecha para mostrar
        import datetime
        date_obj = datetime.datetime(2025, 1, 1) + datetime.timedelta(days=day_of_year - 1)
        st.info(f"üìÜ Fecha correspondiente: {date_obj.strftime('%d de %B de %Y')}")
        
        # Precio global de referencia
        global_price = st.slider(
            "üåç Precio Global de Referencia (USD/Tonelada)",
            min_value=100.0,
            max_value=1000.0,
            value=400.0,
            step=10.0,
            help="Precio internacional de referencia para el producto"
        )
        
        # Informaci√≥n contextual sobre temporadas
        product_info = product_options[selected_product]
        st.info(f"""
        üìà **{selected_product}**: Precio base ~{product_info['base_price']} COP/kg  
        üìä **Volatilidad**: {'Alta' if product_info['volatility'] > 0.3 else 'Media' if product_info['volatility'] > 0.2 else 'Baja'}  
        üåç **Precio global**: {global_price} USD/Ton
        """)
        
        # Bot√≥n de predicci√≥n
        if st.button("üìà Predecir Precio", type="primary", use_container_width=True):
            # Preparar datos para la API
            data = {
                "day": int(day_of_year),
                "global_price": float(global_price)
            }
            
            # Mostrar spinner mientras procesa
            with st.spinner("üîÑ Analizando tendencias de mercado..."):
                try:
                    # Llamada al backend
                    import requests
                    response = requests.post(
                        "http://localhost:8000/mercado", 
                        json=data,
                        timeout=10
                    )
                    
                    if response.status_code == 200:
                        # Guardar resultado en session state
                        result = response.json()
                        # Agregar informaci√≥n del producto seleccionado
                        result['product'] = selected_product
                        result['day'] = day_of_year
                        result['global_price'] = global_price
                        st.session_state.market_result = result
                        st.success("‚úÖ Predicci√≥n de precio completada!")
                        
                    else:
                        st.error(f"‚ùå Error del servidor: {response.status_code}")
                        st.session_state.market_result = None
                        
                except requests.exceptions.ConnectionError:
                    st.error("üîå Error de conexi√≥n: Verifica que el backend est√© ejecut√°ndose en http://localhost:8000")
                    st.session_state.market_result = None
                    
                except requests.exceptions.Timeout:
                    st.error("‚è±Ô∏è Tiempo de espera agotado: El servidor tard√≥ demasiado en responder")
                    st.session_state.market_result = None
                    
                except Exception as e:
                    st.error(f"üí• Error inesperado: {str(e)}")
                    st.session_state.market_result = None
    
    with col2:
        st.subheader("üìà Factores de Precio")
        st.markdown("""
        **‚è∞ Estacionalidad:**
        - Enero-Marzo: Precios altos
        - Abril-Junio: Descenso gradual  
        - Julio-Septiembre: Estabilidad
        - Octubre-Diciembre: Incremento
        
        **üåç Mercado Global:**
        - USD fuerte ‚Üí Precios altos
        - Demanda internacional
        - Clima en otros pa√≠ses
        
        **üöö Factores Locales:**
        - Costos de transporte
        - Disponibilidad regional
        - Festividades y eventos
        """)
        
        # Indicador de temporada
        season = ""
        if 1 <= day_of_year <= 90:
            season = "üå± Temporada Alta"
        elif 91 <= day_of_year <= 180:
            season = "üìâ Descenso Estacional"
        elif 181 <= day_of_year <= 270:
            season = "üìä Periodo Estable"
        else:
            season = "üìà Incremento Estacional"
            
        st.metric("üóìÔ∏è Temporada Actual", season)
    
    # Mostrar resultados si existen
    if st.session_state.market_result is not None:
        st.markdown("---")
        
        result = st.session_state.market_result
        
        # Resultado principal
        predicted_price = result.get('price', 0)
        product_name = result.get('product', 'Producto')
        day_analyzed = result.get('day', day_of_year)
        global_ref = result.get('global_price', global_price)
        
        # Crear m√©tricas visuales
        col_result1, col_result2, col_result3 = st.columns(3)
        
        with col_result1:
            st.metric(
                "üíµ Precio Predicho",
                f"${predicted_price:,.0f} COP/kg",
                delta=None
            )
        
        with col_result2:
            # Calcular variaci√≥n respecto al precio base
            base_price = product_options.get(product_name, {}).get('base_price', predicted_price)
            variation = ((predicted_price - base_price) / base_price) * 100
            st.metric(
                "üìä Variaci√≥n",
                f"{variation:+.1f}%",
                delta=f"vs precio base ({base_price} COP/kg)",
                delta_color="normal" if variation >= 0 else "inverse"
            )
            
        with col_result3:
            # Clasificar el precio
            if variation > 15:
                price_level = "Alto"
                level_color = "üî¥"
            elif variation > 5:
                price_level = "Medio-Alto"
                level_color = "üü†"
            elif variation > -5:
                price_level = "Normal"
                level_color = "üü°"
            elif variation > -15:
                price_level = "Medio-Bajo"
                level_color = "üü¢"
            else:
                price_level = "Bajo"
                level_color = "üîµ"
                
            st.metric(
                "üéØ Nivel de Precio",
                f"{level_color} {price_level}",
                delta=None
            )
        
        # Recomendaciones basadas en el precio
        if variation > 10:
            st.success(f"""
            ### üìà ¬°Precio favorable para la venta!
            
            **Estrategias recomendadas:**
            - üí∞ Momento √≥ptimo para comercializar
            - üöö Acelera la cosecha si es posible
            - üì¶ Negocia contratos a precio actual
            - üè™ Considera venta directa al consumidor
            - üìä Monitorea la competencia
            """)
        elif variation < -10:
            st.warning(f"""
            ### üìâ Precio por debajo del promedio
            
            **Estrategias recomendadas:**
            - ‚è≥ Considera esperar si tienes capacidad de almacenamiento
            - üîÑ Busca mercados alternativos
            - üè≠ Eval√∫a procesamiento o valor agregado
            - üíº Negocia contratos a futuro
            - üìà Monitorea tendencias semanales
            """)
        else:
            st.info(f"""
            ### üìä Precio en rango normal
            
            **Estrategias recomendadas:**
            - ‚öñÔ∏è Mant√©n estrategia comercial actual
            - üìÖ Planifica ventas regulares
            - üë• Fortalece relaciones con compradores
            - üìà Monitorea factores estacionales
            - üîç Busca oportunidades de diferenciaci√≥n
            """)
        
        # Explicabilidad del modelo
        if 'explanation' in result and result['explanation']:
            st.markdown("---")
            st.subheader("üîç Explicabilidad del Modelo (SHAP)")
            
            with st.expander("üìä Ver factores de influencia", expanded=False):
                explanation = result['explanation']
                
                if isinstance(explanation, list) and len(explanation) >= 2:
                    col_exp1, col_exp2 = st.columns(2)
                    
                    with col_exp1:
                        day_impact = explanation[0] if len(explanation) > 0 else 0
                        st.metric(
                            "üìÖ Impacto Temporal",
                            f"{day_impact:.3f}",
                            delta="Positivo" if day_impact > 0 else "Negativo",
                            delta_color="normal" if day_impact > 0 else "inverse"
                        )
                    
                    with col_exp2:
                        global_impact = explanation[1] if len(explanation) > 1 else 0
                        st.metric(
                            "üåç Impacto Global",
                            f"{global_impact:.3f}",
                            delta="Positivo" if global_impact > 0 else "Negativo",
                            delta_color="normal" if global_impact > 0 else "inverse"
                        )
                    
                    st.markdown("""
                    **Interpretaci√≥n:**
                    - Valores positivos incrementan el precio predicho
                    - Valores negativos lo reducen
                    - Mayor magnitud = mayor influencia en la predicci√≥n
                    """)
                else:
                    st.write("Datos de explicabilidad:", explanation)
        
        # An√°lisis de tendencias
        st.markdown("---")
        with st.expander("üìà An√°lisis de Tendencias", expanded=False):
            st.markdown(f"""
            **An√°lisis para {product_name}:**
            
            üìÖ **Factor temporal (d√≠a {day_analyzed}):**
            {f'√âpoca favorable - t√≠picamente precios altos' if 1 <= day_analyzed <= 90 or day_analyzed > 300 
              else f'Periodo de transici√≥n - precios moderados' if 90 < day_analyzed <= 180 or 270 < day_analyzed <= 300
              else '√âpoca estable - precios equilibrados'}
            
            üåç **Factor global ({global_ref} USD/Ton):**
            {f'Precio internacional alto - favorece exportaciones' if global_ref > 600
              else f'Precio internacional moderado - mercado equilibrado' if global_ref > 300
              else 'Precio internacional bajo - competencia fuerte'}
            
            üìä **Recomendaci√≥n general:**
            El precio predicho de ${predicted_price:,.0f} COP/kg representa una 
            {'excelente oportunidad de venta' if variation > 15 
             else 'buena oportunidad comercial' if variation > 5
             else 'situaci√≥n normal de mercado' if variation > -5
             else 'momento para evaluar alternativas' if variation > -15
             else 'situaci√≥n que requiere estrategias especiales'}.
            """)
        
        # Historial y contexto
        with st.expander("üìä Contexto del Mercado", expanded=False):
            st.markdown(f"""
            **Informaci√≥n del an√°lisis:**
            
            üõí **Producto analizado**: {product_name}  
            üìÖ **Fecha objetivo**: {date_obj.strftime('%d de %B de %Y')}  
            üåç **Referencia global**: {global_ref} USD/Tonelada  
            üí∞ **Precio predicho**: ${predicted_price:,.0f} COP/kg  
            
            üìà **Comparaci√≥n hist√≥rica:**
            - Precio base t√≠pico: ${base_price:,.0f} COP/kg
            - Variaci√≥n actual: {variation:+.1f}%
            - Clasificaci√≥n: {price_level}
            
            üéØ **Factores clave:**
            - Estacionalidad del cultivo
            - Tendencias del mercado internacional
            - Condiciones clim√°ticas regionales
            - Demanda del mercado nacional
            """)
    
    else:
        # Mensaje cuando no hay resultados
        st.markdown("---")
        st.warning("‚ö†Ô∏è No hay resultados disponibles. Configura los par√°metros de mercado y presiona 'Predecir Precio' para obtener una predicci√≥n.")
        
        # Mostrar informaci√≥n de mercados
        with st.expander("üìä Informaci√≥n de Mercados", expanded=False):
            st.markdown("""
            **üè™ Principales mercados en Colombia:**
            
            **Bogot√° - Corabastos:**
            - Mayor centro de acopio del pa√≠s
            - Precios de referencia nacional
            - Horario: 24 horas
            
            **Medell√≠n - Central Mayorista:**
            - Segundo mercado m√°s importante
            - Especializado en productos de clima fr√≠o
            - Excelente log√≠stica
            
            **Cali - Cavasa:**
            - Puerto de entrada productos del Pac√≠fico
            - Fuerte en frutas tropicales
            - Conexi√≥n con mercados internacionales
            
            **üì± Fuentes de informaci√≥n:**
            - SIPSA (DANE)
            - Agronet (MADR)  
            - Finagro
            - Bolsa Mercantil de Colombia
            """)
    
    # Footer con informaci√≥n t√©cnica
    st.markdown("---")
    st.caption("üìä Datos SIPSA-DANE | ü§ñ Modelo de regresi√≥n lineal | üíπ Actualizaci√≥n semanal | üá®üá¥ Mercado colombiano")
def render_agro():
    """
    P√°gina de diagn√≥stico de cultivos con an√°lisis de im√°genes
    """
    st.header("üå± AgroExpert - Diagn√≥stico de Hojas")
    st.markdown("**Analiza im√°genes de hojas para detectar enfermedades utilizando inteligencia artificial.**")
    
    # Informaci√≥n explicativa
    with st.expander("‚ÑπÔ∏è ¬øC√≥mo funciona?", expanded=False):
        st.markdown("""
        - **Modelo**: Red neuronal MobileNetV2 con transfer learning
        - **Entrenamiento**: Dataset PlantVillage con hojas sanas y enfermas
        - **Cultivos soportados**: Tomate, papa, ma√≠z, uva, y m√°s
        - **Precisi√≥n**: ~95% en condiciones controladas
        - **Explicabilidad**: Grad-CAM para mostrar √°reas de inter√©s
        """)
    
    # Layout en columnas
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üì§ Subir Imagen")
        
        # File uploader
        uploaded_file = st.file_uploader(
            "Selecciona una imagen de hoja",
            type=['png', 'jpg', 'jpeg'],
            help="L√≠mite 200MB por archivo ‚Ä¢ PNG, JPG, JPEG",
            accept_multiple_files=False
        )
        
        if uploaded_file is not None:
            # Mostrar imagen cargada
            st.image(uploaded_file, caption="Imagen cargada", use_container_width=True)
            
            # Informaci√≥n de la imagen
            file_details = {
                "Nombre": uploaded_file.name,
                "Tipo": uploaded_file.type,
                "Tama√±o": f"{uploaded_file.size / 1024:.2f} KB"
            }
            st.json(file_details)
            
            # Bot√≥n de an√°lisis
            if st.button("üîç Analizar Hoja", type="primary", use_container_width=True):
                with st.spinner("üîÑ Analizando imagen con IA..."):
                    try:
                        # Preparar archivo para env√≠o
                        files = {"file": uploaded_file.getvalue()}
                        
                        # Llamada al backend
                        import requests
                        response = requests.post(
                            "http://localhost:8000/agro",
                            files={"file": (uploaded_file.name, uploaded_file.getvalue(), uploaded_file.type)},
                            timeout=30
                        )
                        
                        if response.status_code == 200:
                            # Guardar resultado en session state
                            result = response.json()
                            st.session_state.agro_result = result
                            st.success("‚úÖ An√°lisis completado exitosamente!")
                            
                        else:
                            st.error(f"‚ùå Error del servidor: {response.status_code}")
                            if response.text:
                                st.error(f"Detalle: {response.text}")
                            st.session_state.agro_result = None
                            
                    except requests.exceptions.ConnectionError:
                        st.error("üîå Error de conexi√≥n: Verifica que el backend est√© ejecut√°ndose en http://localhost:8000")
                        st.session_state.agro_result = None
                        
                    except requests.exceptions.Timeout:
                        st.error("‚è±Ô∏è Tiempo de espera agotado: El an√°lisis tard√≥ demasiado")
                        st.session_state.agro_result = None
                        
                    except Exception as e:
                        st.error(f"üí• Error inesperado: {str(e)}")
                        st.session_state.agro_result = None
        else:
            st.info("üëÜ Sube una imagen de hoja para comenzar el an√°lisis")
    
    with col2:
        st.subheader("üìã Gu√≠a de Uso")
        st.markdown("""
        **üì∏ Mejores pr√°cticas:**
        - Hoja bien iluminada
        - Fondo contrastante
        - Enfoque n√≠tido
        - Hoja completa visible
        
        **üåø Cultivos soportados:**
        - üçÖ Tomate
        - ü•î Papa
        - üåΩ Ma√≠z
        - üçá Uva
        - üçé Manzana
        - ü•í Pepino
        
        **ü¶† Enfermedades detectables:**
        - Tiz√≥n tard√≠o
        - Mancha foliar
        - Mosaico viral
        - √ìxido
        - Y m√°s...
        """)
    
    # Mostrar resultados si existen
    if st.session_state.agro_result is not None:
        st.markdown("---")
        
        result = st.session_state.agro_result
        
        # Resultado principal
        is_sick = result.get('sick', False)
        confidence = result.get('confidence', 0)
        
        # Crear m√©tricas visuales
        col_result1, col_result2, col_result3 = st.columns(3)
        
        with col_result1:
            if is_sick:
                st.metric(
                    "ü¶† Diagn√≥stico",
                    "ENFERMO",
                    delta="Requiere atenci√≥n",
                    delta_color="inverse"
                )
            else:
                st.metric(
                    "‚úÖ Diagn√≥stico",
                    "SANO",
                    delta="Estado normal",
                    delta_color="normal"
                )
        
        with col_result2:
            st.metric(
                "üìä Confianza",
                f"{confidence:.1%}" if confidence > 0 else "N/A",
                delta=None
            )
            
        with col_result3:
            # Nivel de riesgo basado en predicci√≥n
            risk_level = "Alto" if is_sick else "Bajo"
            st.metric(
                "‚ö†Ô∏è Riesgo",
                risk_level,
                delta=None
            )
        
        # Alerta principal
        if is_sick:
            st.error("""
            ### ü¶† ¬°Alerta: Posible enfermedad detectada!
            
            **Recomendaciones inmediatas:**
            - üîç Inspecciona otras plantas cercanas
            - üöø Aplica tratamiento fungicida si es necesario
            - ‚úÇÔ∏è Considera podar hojas afectadas
            - üìû Consulta con un agr√≥nomo local
            - üìù Registra la ubicaci√≥n y fecha del hallazgo
            """)
        else:
            st.success("""
            ### ‚úÖ Hoja en buen estado
            
            **Mant√©n las buenas pr√°cticas:**
            - üíß Contin√∫a con el riego regular
            - üå± Monitorea el crecimiento
            - üîÑ Realiza inspecciones peri√≥dicas
            - üåø Mant√©n la nutrici√≥n adecuada
            - üßπ Limpieza regular del cultivo
            """)
        
        # Explicabilidad con Grad-CAM
        if 'explanation_heatmap' in result and result['explanation_heatmap']:
            st.markdown("---")
            st.subheader("üîç Explicabilidad del Modelo (Grad-CAM)")
            
            with st.expander("üéØ Ver mapa de calor", expanded=False):
                st.markdown("""
                El **mapa de calor** muestra las √°reas de la imagen que m√°s influenciaron 
                la decisi√≥n del modelo. Las zonas m√°s brillantes son las que el modelo 
                consider√≥ m√°s importantes para el diagn√≥stico.
                """)
                
                try:
                    import numpy as np
                    import matplotlib.pyplot as plt
                    import cv2
                    
                    # Procesar heatmap
                    heatmap_data = np.array(result['explanation_heatmap'])
                    
                    if heatmap_data.size > 0:
                        # Normalizar para visualizaci√≥n
                        heatmap_normalized = (heatmap_data - heatmap_data.min()) / (heatmap_data.max() - heatmap_data.min() + 1e-8)
                        
                        # Crear visualizaci√≥n
                        fig, ax = plt.subplots(figsize=(8, 6))
                        im = ax.imshow(heatmap_normalized, cmap='hot', interpolation='bilinear')
                        ax.set_title('Mapa de Calor - √Åreas de Atenci√≥n')
                        ax.axis('off')
                        plt.colorbar(im, ax=ax, label='Intensidad de Atenci√≥n')
                        
                        st.pyplot(fig)
                        
                        st.markdown("""
                        **Interpretaci√≥n:**
                        - üî¥ **Rojo intenso**: √Åreas cr√≠ticas para el diagn√≥stico
                        - üü† **Naranja**: √Åreas de inter√©s moderado  
                        - üü° **Amarillo**: √Åreas de baja relevancia
                        """)
                    else:
                        st.warning("No se pudo generar el mapa de calor")
                        
                except Exception as e:
                    st.warning(f"Error al procesar explicabilidad: {str(e)}")
                    st.json(result['explanation_heatmap'])
        
        # Informaci√≥n adicional
        st.markdown("---")
        with st.expander("üìä Detalles T√©cnicos", expanded=False):
            st.markdown(f"""
            **Informaci√≥n del an√°lisis:**
            
            ü§ñ **Modelo utilizado**: MobileNetV2 con transfer learning  
            üìö **Dataset de entrenamiento**: PlantVillage (54,305 im√°genes)  
            üéØ **Clases**: Sano vs. Enfermo (binario)  
            üî¨ **Precisi√≥n del modelo**: ~95% en dataset de validaci√≥n  
            ‚ö° **Tiempo de procesamiento**: < 5 segundos  
            
            **Resultado completo:**
            """)
            st.json(result)
        
        # Historial y recomendaciones
        with st.expander("üìã Historial y Seguimiento", expanded=False):
            st.markdown("""
            **Para un mejor seguimiento:**
            
            üìÖ **Registro recomendado:**
            - Fecha y hora del an√°lisis
            - Ubicaci√≥n de la planta
            - Condiciones clim√°ticas
            - Tratamientos aplicados
            
            üîÑ **Frecuencia de monitoreo:**
            - Plantas sanas: Semanal
            - Plantas enfermas: Diario
            - Post-tratamiento: Cada 2-3 d√≠as
            
            üìû **Cu√°ndo contactar un experto:**
            - Propagaci√≥n r√°pida
            - S√≠ntomas no mejoran
            - M√∫ltiples plantas afectadas
            """)
    
    else:
        # Mensaje cuando no hay resultados
        st.markdown("---")
        st.warning("‚ö†Ô∏è No hay resultados disponibles. Sube una imagen de hoja para obtener un diagn√≥stico.")
        
        # Mostrar ejemplos
        with st.expander("üí° Ejemplos de im√°genes", expanded=False):
            st.markdown("""
            **‚úÖ Buenas im√°genes para an√°lisis:**
            
            üåø **Hoja sana de tomate:**
            - Verde uniforme
            - Sin manchas o decoloraci√≥n
            - Superficie lisa
            
            ü¶† **Hoja enferma de papa:**
            - Manchas marrones o negras
            - Bordes amarillentos
            - Textura irregular
            
            **üì∏ Consejos de fotograf√≠a:**
            - Luz natural indirecta
            - Fondo simple (papel blanco)
            - Distancia de 20-30 cm
            - Evitar sombras fuertes
            """)
    
    # Footer con informaci√≥n t√©cnica
    st.markdown("---")
    st.caption("ü§ñ Modelo MobileNetV2 entrenado con PlantVillage | üî¨ Precisi√≥n 95% | üå± Especializado en agricultura colombiana")
def render_finance():
    """P√°gina de FinanceAI"""
    st.markdown("## üè¶ FinanceAI - Evaluaci√≥n de Microcr√©ditos")
    st.markdown("Eval√∫a la viabilidad de microcr√©ditos rurales bas√°ndose en criterios espec√≠ficos del sector agropecuario.")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### Informaci√≥n del Solicitante")
        
        # Inputs
        income = st.number_input(
            "Ingresos mensuales (miles COP)",
            min_value=500.0, max_value=10000.0, value=3500.0, step=100.0
        )
        
        crop_types = {
            "Caf√©": 0,
            "Cacao": 1,
            "Aguacate": 2,
            "Tabaco": 3,
            "Policultivo": 4
        }
        
        crop_name = st.selectbox("Tipo de cultivo principal", list(crop_types.keys()))
        crop_type_encoded = crop_types[crop_name]
        
        credit_history = st.slider(
            "Historial crediticio (0=malo, 1=excelente)",
            min_value=0.0, max_value=1.0, value=0.7, step=0.1
        )
        
        # Informaci√≥n contextual
        st.info(f"""
        **Perfil del Solicitante:**
        - Ingresos: ${income:,.0f} mil COP/mes
        - Cultivo: {crop_name}
        - Historial: {'Excelente' if credit_history > 0.8 else 'Bueno' if credit_history > 0.5 else 'Regular' if credit_history > 0.3 else 'Malo'}
        """)
        
        if st.button("üèß Evaluar Cr√©dito", key="finance_predict"):
            with st.spinner("Evaluando solicitud..."):
                try:
                    response = requests.post(
                        f"{API_BASE_URL}/finanzas",
                        json={
                            "income": income,
                            "crop_type_encoded": crop_type_encoded,
                            "credit_history": credit_history
                        },
                        timeout=10
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        st.session_state.finance_result = result
                    else:
                        st.error(f"Error en la evaluaci√≥n: {response.status_code}")
                        
                except Exception as e:
                    st.error(f"Error de conexi√≥n: {str(e)}")
    
    with col2:
        st.markdown("### Resultado de la Evaluaci√≥n")
        
        if 'finance_result' in st.session_state:
            result = st.session_state.finance_result
            
            # Resultado principal
            approved = result.get('approve', False)
            confidence = result.get('confidence', 0)
            
            if approved:
                st.markdown(f"""
                <div class="result-success">
                <h4>‚úÖ CR√âDITO APROBADO</h4>
                <p>Confianza: {confidence:.1%}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Calcular monto sugerido
                suggested_amount = min(income * 12 * 0.3, 15000000)  # 30% ingresos anuales, m√°x 15M
                
                st.markdown(f"""
                **Condiciones Sugeridas:**
                - Monto m√°ximo: ${suggested_amount:,.0f} COP
                - Plazo: 12-24 meses
                - Tasa preferencial para sector rural
                """)
                
            else:
                st.markdown(f"""
                <div class="result-warning">
                <h4>‚ùå CR√âDITO NO APROBADO</h4>
                <p>Confianza: {confidence:.1%}</p>
                </div>
                """, unsafe_allow_html=True)
                
                st.markdown("**Recomendaciones para mejorar:**")
                if income < 2000:
                    st.markdown("- Aumentar ingresos o demostrar ingresos adicionales")
                if credit_history < 0.5:
                    st.markdown("- Mejorar historial crediticio")
                    st.markdown("- Considerar microcr√©ditos de menor monto")
                st.markdown("- Presentar avales o garant√≠as adicionales")
            
            # Explicabilidad
            if 'explanation' in result:
                st.markdown("### Factores de Decisi√≥n")
                explanation = result['explanation']
                features = result.get('features', ['Ingresos', 'Tipo de cultivo', 'Historial crediticio'])
                
                if len(explanation) > 0:
                    # Extraer valores SHAP
                    if isinstance(explanation[0], list) and len(explanation[0]) > 0:
                        if isinstance(explanation[0][0], list):
                            # SHAP binario - tomar clase positiva
                            feature_importance = [x[1] for x in explanation[0]]
                        else:
                            feature_importance = explanation[0]
                    else:
                        feature_importance = explanation
                    
                    # Crear gr√°fico
                    fig = go.Figure()
                    colors = ['#FF6B6B' if x < 0 else '#51CF66' for x in feature_importance]
                    
                    fig.add_trace(go.Bar(
                        x=features,
                        y=feature_importance,
                        marker_color=colors,
                        text=[f"{x:.3f}" for x in feature_importance],
                        textposition='auto'
                    ))
                    
                    fig.update_layout(
                        title="Contribuci√≥n de Factores a la Decisi√≥n",
                        xaxis_title="Variables",
                        yaxis_title="Influencia en Aprobaci√≥n",
                        height=350
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    st.markdown("""
                    <div class="explanation-box">
                    <small><strong>Interpretaci√≥n:</strong> Valores positivos favorecen la aprobaci√≥n, 
                    valores negativos la perjudican. Los ingresos suelen ser el factor m√°s determinante.</small>
                    </div>
                    """, unsafe_allow_html=True)
        else:
            st.info("üíº Complete la informaci√≥n y eval√∫e para ver los resultados")

if __name__ == "__main__":
    # Inicializar session state
    if 'climate_result' not in st.session_state:
        st.session_state.climate_result = None
    if 'market_result' not in st.session_state:
        st.session_state.market_result = None
    if 'agro_result' not in st.session_state:
        st.session_state.agro_result = None
    if 'finance_result' not in st.session_state:
        st.session_state.finance_result = None
    
    main()